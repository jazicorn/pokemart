// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgres

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

model User {
  id            String    @id @unique @default(uuid())
  name          String    @unique @db.VarChar(35)
  password      String    @db.VarChar(55)
  email         String    @unique @db.VarChar(55)
  emailConfirm  Boolean   @default(false)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  todolist      Todo[]
  Profile       Profile?

  @@unique([id, name])
}

enum Role {
  USER
  ADMIN
}

// removed unique constraints from userId and userName, caused error during seeding
model Profile {
  id         String   @id @unique @default(uuid())
  name_first String?  @map("firstname")
  name_last  String?  @map("lastname")
  image      String?
  bio        String?  @db.VarChar(555)
  handles    Handle[]
  complete   Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  public     Boolean  @default(false)

  user     User   @relation(fields: [userId, userName], references: [id, name], onDelete: Cascade)
  userId   String
  userName String @unique @db.VarChar(35)

  @@unique([userId, userName])
}

enum Social {
  GITHUB
  GOOGLE
  TWITTER
  FACEBOOK
}

model Handle {
  id        Int      @id @default(autoincrement())
  social    Social
  userName  String   @db.VarChar(55)
  link      String   @db.VarChar(55)
  public    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
}

model Todo {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(55)
  item      Item[]
  completed Boolean  @default(false)
  listType  ListType @default(TODOLIST)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Item {
  id        Int      @id @default(autoincrement())
  action    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completed Boolean  @default(false)

  todo   Todo @relation(fields: [todoId], references: [id], onDelete: Cascade)
  todoId Int
}

// create different type of values
enum ListType {
  TODOLIST
  TODOLISTPLUS
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
